name: üîí Domain Sanitization Check

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main ]

jobs:
  domain-check:
    name: Scan for Production Domains
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Set up scanning environment
      run: |
        # Create results directory
        mkdir -p scan-results

        # Define critical domains that MUST be blocked (only if environment variables are set)
        BLOCKED_DOMAIN="${PRODUCTION_DOMAIN:-}"
        if [ -n "$BLOCKED_DOMAIN" ]; then
          echo "$BLOCKED_DOMAIN" > critical-domains.txt
        else
          # Create empty file if no production domain is configured
          touch critical-domains.txt
        fi

        # Define allowed template domain
        echo "yourdomain.com" > allowed-domains.txt

        echo "üîß Using blocked domain: $BLOCKED_DOMAIN"
      env:
        PRODUCTION_DOMAIN: ${{ vars.PRODUCTION_DOMAIN }}

    - name: Scan for production domains
      run: |
        #!/bin/bash
        set -e

        echo "üîç Scanning for production domain exposure..."

        # Files to scan (exclude binary files and safe directories)
        SCAN_FILES=$(find . -type f \
          -name "*.yml" -o -name "*.yaml" -o -name "*.md" -o -name "*.sh" \
          -o -name "*.json" -o -name "*.toml" -o -name "*.env*" \
          -o -name "*.conf" -o -name "*.config" \
          | grep -v ".git/" \
          | grep -v "node_modules/" \
          | grep -v ".github/workflows/" \
          | sort)

        # Critical check: corporateseas.com MUST NOT appear anywhere
        CRITICAL_VIOLATIONS=""
        while IFS= read -r domain; do
          echo "üö® Checking for critical domain: $domain"

          MATCHES=$(echo "$SCAN_FILES" | xargs grep -l "$domain" 2>/dev/null || true)

          if [ ! -z "$MATCHES" ]; then
            echo "‚ùå CRITICAL VIOLATION: Found $domain in:"
            echo "$MATCHES" | while read -r file; do
              echo "  üìÑ $file"
              grep -n "$domain" "$file" | head -5 | while read -r line; do
                echo "    üîç Line: $line"
              done
            done
            CRITICAL_VIOLATIONS="$CRITICAL_VIOLATIONS$domain "
          else
            echo "‚úÖ No instances of $domain found"
          fi
        done < critical-domains.txt

        # Template compliance check
        echo "üìã Checking template compliance..."
        TEMPLATE_VIOLATIONS=""

        # Check that files in templates/ only use yourdomain.com
        if [ -d "templates/" ]; then
          TEMPLATE_FILES=$(find templates/ -type f -name "*.template" 2>/dev/null || true)

          if [ ! -z "$TEMPLATE_FILES" ]; then
            for file in $TEMPLATE_FILES; do
              # Check for any .com domain that isn't yourdomain.com variants or known API endpoints
              DOMAIN_MATCHES=$(grep -n "\.[a-zA-Z0-9-]\+\.com" "$file" 2>/dev/null | grep -v "yourdomain\.com" | grep -v "yourdomain\.1password\.com" | grep -v "api\.openai\.com" | grep -v "openrouter\.ai" | grep -v "www\.apple\.com" || true)

              if [ ! -z "$DOMAIN_MATCHES" ]; then
                echo "‚ùå Template violation in $file:"
                echo "$DOMAIN_MATCHES"
                TEMPLATE_VIOLATIONS="$TEMPLATE_VIOLATIONS$file "
              fi
            done
          fi
        fi

        # Generate scan report
        echo "üìä DOMAIN SCAN REPORT" > scan-results/domain-report.txt
        echo "===================" >> scan-results/domain-report.txt
        echo "Scan Date: $(date)" >> scan-results/domain-report.txt
        echo "Files Scanned: $(echo "$SCAN_FILES" | wc -l)" >> scan-results/domain-report.txt
        echo "" >> scan-results/domain-report.txt

        # Final verdict
        if [ ! -z "$CRITICAL_VIOLATIONS" ] || [ ! -z "$TEMPLATE_VIOLATIONS" ]; then
          echo "Status: ‚ùå FAILED" >> scan-results/domain-report.txt
          echo "" >> scan-results/domain-report.txt

          if [ ! -z "$CRITICAL_VIOLATIONS" ]; then
            echo "üö® CRITICAL DOMAIN VIOLATIONS:" >> scan-results/domain-report.txt
            echo "$CRITICAL_VIOLATIONS" >> scan-results/domain-report.txt
            echo "" >> scan-results/domain-report.txt
          fi

          if [ ! -z "$TEMPLATE_VIOLATIONS" ]; then
            echo "üìã TEMPLATE VIOLATIONS:" >> scan-results/domain-report.txt
            echo "$TEMPLATE_VIOLATIONS" >> scan-results/domain-report.txt
          fi

          cat scan-results/domain-report.txt
          echo ""
          echo "üö® SECURITY FAILURE: Production domains or template violations detected!"
          echo "üìù Fix these issues before merging:"
          echo "   1. Remove all instances of corporateseas.com"
          echo "   2. Ensure templates only use yourdomain.com"
          echo "   3. Verify generated files are properly gitignored"
          exit 1
        else
          echo "Status: ‚úÖ PASSED" >> scan-results/domain-report.txt
          echo "‚úÖ All domain checks passed!"
        fi

    - name: Upload scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: domain-scan-results
        path: scan-results/
        retention-days: 30