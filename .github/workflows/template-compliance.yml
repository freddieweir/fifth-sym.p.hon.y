name: üìã Template System Compliance

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  template-check:
    name: Template Structure Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Validate template system
      run: |
        #!/bin/bash
        set -e

        echo "üìã Validating Carian Observatory template system..."

        # Initialize violation tracking
        VIOLATIONS=""
        VIOLATION_COUNT=0

        # Check 1: Verify .gitignore excludes generated files
        echo "üîç Checking .gitignore compliance..."

        REQUIRED_IGNORES=(
          "scripts/"
          "services/\*/configs/"
          ".env"
          "CLAUDE.md"
        )

        if [ ! -f ".gitignore" ]; then
          echo "‚ùå .gitignore file missing!"
          VIOLATIONS="$VIOLATIONS\n- Missing .gitignore file"
          VIOLATION_COUNT=$((VIOLATION_COUNT + 1))
        else
          for ignore_pattern in "${REQUIRED_IGNORES[@]}"; do
            if ! grep -q "^$ignore_pattern" .gitignore; then
              echo "‚ùå .gitignore missing pattern: $ignore_pattern"
              VIOLATIONS="$VIOLATIONS\n- .gitignore missing: $ignore_pattern"
              VIOLATION_COUNT=$((VIOLATION_COUNT + 1))
            else
              echo "‚úÖ .gitignore includes: $ignore_pattern"
            fi
          done
        fi

        # Check 2: Template file structure (services use .template files)
        echo "üèóÔ∏è Checking template structure..."

        # Check for .template files in services
        TEMPLATE_FILES=$(find services/ -name "*.template" 2>/dev/null || true)

        if [ -z "$TEMPLATE_FILES" ]; then
          echo "‚ÑπÔ∏è No .template files found in services/ (this is optional)"
        else
          TEMPLATE_COUNT=$(echo "$TEMPLATE_FILES" | wc -l)
          echo "‚úÖ Found $TEMPLATE_COUNT template files in services/"

          # Validate each template file
          echo "$TEMPLATE_FILES" | while read -r template_file; do
            # Check for yourdomain.com usage
            if grep -q "yourdomain.com" "$template_file"; then
              echo "‚úÖ $template_file uses yourdomain.com placeholder"
            else
              # Check if it should contain domain references
              if grep -qE "\.(com|net|org)" "$template_file"; then
                echo "‚ö†Ô∏è $template_file contains domains but not yourdomain.com"
              fi
            fi
          done
        fi

        # Check 3: Verify scripts/ directory - only .template files should be tracked
        echo "üö´ Checking scripts/ directory template compliance..."

        if [ -d "scripts/" ]; then
          # Check if any non-.template files in scripts/ are tracked by git
          TRACKED_NON_TEMPLATES=$(git ls-files scripts/ 2>/dev/null | grep -v "\.template$" || true)

          if [ ! -z "$TRACKED_NON_TEMPLATES" ]; then
            echo "‚ùå Found tracked non-template files in scripts/ directory:"
            echo "$TRACKED_NON_TEMPLATES"
            VIOLATIONS="$VIOLATIONS\n- Tracked non-template files in scripts/: $TRACKED_NON_TEMPLATES"
            VIOLATION_COUNT=$((VIOLATION_COUNT + 1))
          else
            echo "‚úÖ scripts/ directory properly configured (only .template files tracked)"
          fi

          # Check that .template files exist and are tracked
          TRACKED_TEMPLATES=$(git ls-files scripts/ 2>/dev/null | grep "\.template$" || true)
          if [ ! -z "$TRACKED_TEMPLATES" ]; then
            TEMPLATE_COUNT=$(echo "$TRACKED_TEMPLATES" | wc -l)
            echo "‚úÖ Found $TEMPLATE_COUNT .template files tracked in scripts/"
          fi
        fi

        # Check 4: Container naming convention
        echo "üê≥ Checking container naming convention..."

        DOCKER_FILES=$(find . -name "docker-compose*.yml" 2>/dev/null || true)

        if [ ! -z "$DOCKER_FILES" ]; then
          echo "$DOCKER_FILES" | while read -r compose_file; do
            # Check for co- prefix in container names
            CONTAINER_NAMES=$(grep -E "container_name:" "$compose_file" 2>/dev/null || true)

            if [ ! -z "$CONTAINER_NAMES" ]; then
              NON_COMPLIANT=$(echo "$CONTAINER_NAMES" | grep -v "co-" || true)

              if [ ! -z "$NON_COMPLIANT" ]; then
                echo "‚ö†Ô∏è Non-compliant container names in $compose_file:"
                echo "$NON_COMPLIANT"
              fi
            fi
          done
        fi

        # Check 5: Service structure validation
        echo "üè¢ Checking service structure..."

        if [ -d "services/" ]; then
          SERVICES=$(find services/ -mindepth 1 -maxdepth 1 -type d 2>/dev/null || true)

          if [ ! -z "$SERVICES" ]; then
            echo "$SERVICES" | while read -r service_dir; do
              SERVICE_NAME=$(basename "$service_dir")

              # Check for docker-compose.yml in service
              if [ -f "$service_dir/docker-compose.yml" ]; then
                echo "‚úÖ $SERVICE_NAME has docker-compose.yml"
              else
                echo "‚ö†Ô∏è $SERVICE_NAME missing docker-compose.yml"
              fi

              # Check for configs directory
              if [ -d "$service_dir/configs/" ]; then
                # Check if non-.template configs are tracked (they shouldn't be)
                TRACKED_NON_TEMPLATE_CONFIGS=$(git ls-files "$service_dir/configs/" 2>/dev/null | grep -v "\.template$" || true)

                if [ ! -z "$TRACKED_NON_TEMPLATE_CONFIGS" ]; then
                  echo "‚ùå Tracked non-template config files in $service_dir/configs/:"
                  echo "$TRACKED_NON_TEMPLATE_CONFIGS"
                  VIOLATIONS="$VIOLATIONS\n- Tracked non-template configs: $TRACKED_NON_TEMPLATE_CONFIGS"
                  VIOLATION_COUNT=$((VIOLATION_COUNT + 1))
                else
                  echo "‚úÖ $SERVICE_NAME configs properly configured (only .template files tracked)"
                fi

                # Check that .template files exist and are tracked
                TRACKED_TEMPLATE_CONFIGS=$(git ls-files "$service_dir/configs/" 2>/dev/null | grep "\.template$" || true)
                if [ ! -z "$TRACKED_TEMPLATE_CONFIGS" ]; then
                  CONFIG_TEMPLATE_COUNT=$(echo "$TRACKED_TEMPLATE_CONFIGS" | wc -l)
                  echo "‚úÖ Found $CONFIG_TEMPLATE_COUNT .template config files in $SERVICE_NAME"
                fi
              fi
            done
          fi
        fi

        # Check 6: Co-located template validation
        echo "üîÑ Checking co-located template structure..."

        # Check that template files are co-located with their generated counterparts
        if [ -d "services/" ]; then
          echo "‚úÖ Using co-located template structure (templates alongside generated files)"

          # Count co-located templates
          COLOCATED_TEMPLATES=$(find services/ -name "*.template" 2>/dev/null | wc -l)
          if [ $COLOCATED_TEMPLATES -gt 0 ]; then
            echo "‚úÖ Found $COLOCATED_TEMPLATES co-located .template files in services/"
          fi
        fi

        # Legacy check: warn if old templates/ directory exists
        if [ -d "templates/" ]; then
          echo "‚ö†Ô∏è Legacy templates/ directory found - consider migrating to co-located structure"
          LEGACY_TEMPLATE_COUNT=$(find templates/ -name "*.template" 2>/dev/null | wc -l)
          if [ $LEGACY_TEMPLATE_COUNT -gt 0 ]; then
            echo "‚ö†Ô∏è Found $LEGACY_TEMPLATE_COUNT template files in legacy templates/ directory"
          fi
        fi

        # Check 7: Co-located script template validation
        echo "üìú Checking co-located script template structure..."

        if [ -d "scripts/" ]; then
          # Find .template files in scripts/
          SCRIPT_TEMPLATES=$(find scripts/ -name "*.sh.template" 2>/dev/null || true)

          if [ ! -z "$SCRIPT_TEMPLATES" ]; then
            SCRIPT_TEMPLATE_COUNT=$(echo "$SCRIPT_TEMPLATES" | wc -l)
            echo "‚úÖ Found $SCRIPT_TEMPLATE_COUNT co-located .template files in scripts/"

            # Validate that corresponding generated files exist (but are gitignored)
            echo "$SCRIPT_TEMPLATES" | while read -r template_file; do
              GENERATED_FILE="${template_file%.template}"
              if [ -f "$GENERATED_FILE" ]; then
                # Check if generated file is properly gitignored
                if git ls-files --error-unmatch "$GENERATED_FILE" >/dev/null 2>&1; then
                  echo "‚ö†Ô∏è Generated file $GENERATED_FILE should be gitignored"
                fi
              fi
            done
          else
            echo "‚ÑπÔ∏è No .template files found in scripts/ (templates may be elsewhere)"
          fi
        fi

        # Check 8: README.md domain compliance
        echo "üéØ Checking README.md domain compliance..."

        if [ -f "README.md" ]; then
          if grep -q "yourdomain.com" README.md; then
            echo "‚úÖ README.md uses yourdomain.com placeholder"
          else
            if grep -qE "\.(com|net|org)" README.md; then
              echo "‚ö†Ô∏è README.md may contain real domains (should use yourdomain.com)"
            else
              echo "‚úÖ README.md contains no domain references"
            fi
          fi
        else
          echo "‚ÑπÔ∏è No README.md found"
        fi

        # Generate compliance report
        echo ""
        echo "üìä TEMPLATE COMPLIANCE REPORT"
        echo "============================"
        echo "Scan Date: $(date)"
        echo "Total Violations: $VIOLATION_COUNT"

        if [ $VIOLATION_COUNT -gt 0 ]; then
          echo ""
          echo "‚ùå COMPLIANCE VIOLATIONS:"
          echo -e "$VIOLATIONS"
          echo ""
          echo "üîß FIXES NEEDED:"
          echo "1. Update .gitignore to exclude generated files (allow .template files)"
          echo "2. Ensure template files use yourdomain.com"
          echo "3. Remove any tracked non-template files from scripts/ and services/*/configs/"
          echo "4. Verify container names use co- prefix"
          echo "5. Ensure .template files are co-located with their generated counterparts"
          echo "6. Update template processor to work with co-located structure"
          echo "7. Remove legacy templates/ directory if migrated to co-located structure"
          echo ""
          exit 1
        else
          echo "‚úÖ All template compliance checks passed!"
        fi